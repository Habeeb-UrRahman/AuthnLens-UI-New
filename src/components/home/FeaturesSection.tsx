
import { useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, Image, FileText, Video, AudioLines } from 'lucide-react';

const features = [
  {
    title: "Image Detection",
    description: "Detect AI-generated images with an advanced ELA + CNN architecture",
    icon: Image,
    color: "from-aurora-purple to-aurora-blue",
    link: "/image",
    benefits: ["93% Accuracy", "Fast Processing", "Detail Analysis"]
  },
  {
    title: "Video Analysis",
    description: "Identify synthetic videos and deepfakes with advanced frame analysis",
    icon: Video,
    color: "from-aurora-blue to-aurora-cyan",
    link: "/video",
    benefits: ["92% Accuracy", "Deepfake Detection", "Real-time Results"]
  },
  {
    title: "Audio Recognition",
    description: "Detect AI generated audio deepfakes, speaker identification using voice patterns", 
    icon: AudioLines,
    color: "from-aurora-cyan to-aurora-teal",
    link: "/audio",
    benefits: ["98% Accuracy", "Voice Pattern Analysis", "Audio Deepfake Detection"]
  },
  {
    title: "Text Verification",
    description: "Analyze text to detect content generated by language models",
    icon: FileText,
    color: "from-aurora-teal to-aurora-emerald",
    link: "/text",
    benefits: ["83% Accuracy", "Stylometric Analysis", "Context Analysis"]
  },
];

const FeaturesSection = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const cardsRef = useRef<(HTMLDivElement | null)[]>([]);

  // Intersection observer for scroll animations
  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-enter');
          entry.target.classList.remove('opacity-0');
        }
      });
    }, { 
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    });

    cardsRef.current.forEach(card => {
      if (card) observer.observe(card);
    });

    return () => {
      cardsRef.current.forEach(card => {
        if (card) observer.unobserve(card);
      });
    };
  }, []);

  return (
    <section 
      id="features" 
      ref={sectionRef}
      className="py-20 md:py-28"
    >
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-5xl font-bold mb-4 gradient-text">Detection Capabilities</h2>
          <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
            Our cutting-edge AI models can detect artificially generated content across multiple media formats with exceptional accuracy
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto">
          {features.map((feature, index) => (
            <Card 
              key={index} 
              ref={el => cardsRef.current[index] = el}
              className="opacity-0 border-2 border-white/10 hover:border-primary/20 overflow-hidden transition-all duration-500 group shadow-glass hover:shadow-3d interactive-card bg-white/50 dark:bg-gray-900/30 backdrop-blur-sm"
              style={{ transitionDelay: `${index * 100}ms` }}
            >
              <CardHeader className={cn("p-6", `bg-gradient-to-br ${feature.color} bg-clip-text text-transparent`)}>
                <div className="flex items-center mb-3">
                  <div className={cn("p-2 rounded-lg mr-3 flex-shrink-0 transition-all duration-500 group-hover:scale-110", `bg-gradient-to-br ${feature.color}`)}>
                    <feature.icon className="h-6 w-6 text-white" />
                  </div>
                  <CardTitle className="text-2xl group-hover:translate-x-1 transition-transform duration-300">{feature.title}</CardTitle>
                </div>
                <CardDescription className="text-base text-foreground/70">{feature.description}</CardDescription>
              </CardHeader>
              <CardContent className="pt-6 pb-4">
                <div className="mb-4">
                  <ul className="grid grid-cols-1 gap-2">
                    {feature.benefits.map((benefit, i) => (
                      <li key={i} className="flex items-center text-sm group-hover:translate-x-1 transition-transform duration-300" style={{ transitionDelay: `${i * 50}ms` }}>
                        <CheckCircle className={`h-4 w-4 mr-2 text-aurora-${['purple', 'blue', 'cyan', 'teal'][index % 4]}`} />
                        <span>{benefit}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div className="flex justify-end mt-4">
                  <Button 
                    variant="ghost" 
                    asChild 
                    className={`text-aurora-${['purple', 'blue', 'cyan', 'teal'][index % 4]} hover:bg-aurora-${['purple', 'blue', 'cyan', 'teal'][index % 4]}/10 group overflow-hidden relative`}
                  >
                    <Link to={feature.link} className="flex items-center">
                      <span className="relative z-10">Try Now</span>
                      <svg 
                        xmlns="http://www.w3.org/2000/svg" 
                        width="24" 
                        height="24" 
                        viewBox="0 0 24 24" 
                        fill="none" 
                        stroke="currentColor" 
                        strokeWidth="2" 
                        strokeLinecap="round" 
                        strokeLinejoin="round" 
                        className="ml-1 w-4 h-4 transition-transform duration-300 group-hover:translate-x-1 relative z-10"
                      >
                        <path d="M5 12h14" />
                        <path d="m12 5 7 7-7 7" />
                      </svg>
                    </Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  );
};

export default FeaturesSection;
