
import { useState } from 'react';
import Layout from '@/components/Layout';
import FileUpload from '@/components/FileUpload';
import DetectionResult from '@/components/DetectionResult';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import { Loader } from 'lucide-react';

// Define API endpoint (replace with your actual API URL)
const API_URL = 'http://localhost:5000';

const ImageDetection = () => {
  const [file, setFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisComplete, setAnalysisComplete] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<{ isAI: boolean; confidence: number } | undefined>();
  const [apiStatus, setApiStatus] = useState<'unknown' | 'online' | 'offline'>('unknown');
  const { toast } = useToast();

  // Check API health when component mounts
  useState(() => {
    checkApiHealth();
  });

  const checkApiHealth = async () => {
    try {
      const response = await fetch(`${API_URL}/health`);
      if (response.ok) {
        setApiStatus('online');
      } else {
        setApiStatus('offline');
        toast({
          title: "API Connection Issue",
          description: "Unable to connect to the detection server",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("API health check failed:", error);
      setApiStatus('offline');
      toast({
        title: "API Connection Issue",
        description: "Unable to connect to the detection server",
        variant: "destructive",
      });
    }
  };

  const handleFileSelected = (selectedFile: File) => {
    setFile(selectedFile);
    setAnalysisComplete(false);
    setAnalysisResult(undefined);
    
    // Create image preview
    const reader = new FileReader();
    reader.onload = (e) => {
      setImagePreview(e.target?.result as string);
    };
    reader.readAsDataURL(selectedFile);
  };

  const handleAnalyzeClick = async () => {
    if (!file) {
      toast({
        title: "No image selected",
        description: "Please upload an image to analyze",
        variant: "destructive",
      });
      return;
    }

    setIsAnalyzing(true);
    setAnalysisComplete(false);
    
    try {
      // Create form data for file upload
      const formData = new FormData();
      formData.append('image', file);
      
      // Send request to Flask API
      const response = await fetch(`${API_URL}/predict`, {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      // Process the response
      setAnalysisResult({
        isAI: result.isAI,
        confidence: result.confidence,
      });
      
      setAnalysisComplete(true);
      
      toast({
        title: "Analysis complete",
        description: result.isAI 
          ? "This image appears to be AI-generated" 
          : "This image appears to be human-created",
      });
    } catch (error) {
      console.error('Error analyzing image:', error);
      toast({
        title: "Analysis failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleReset = () => {
    setFile(null);
    setImagePreview(null);
    setIsAnalyzing(false);
    setAnalysisComplete(false);
    setAnalysisResult(undefined);
  };

  return (
    <Layout>
      <div className="container mx-auto px-4 py-10">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-10">
            <h1 className="text-3xl md:text-4xl font-bold mb-4">Image Detection</h1>
            <p className="text-muted-foreground">
              Upload an image to determine whether it was generated by AI or created by a human
            </p>
            {apiStatus === 'offline' && (
              <div className="mt-4 p-3 bg-destructive/10 border border-destructive/30 rounded-md text-destructive">
                <p className="font-medium">Detection server is offline</p>
                <p className="text-sm">Please ensure the Flask server is running at {API_URL}</p>
              </div>
            )}
          </div>
          
          <div className="grid md:grid-cols-5 gap-8">
            <div className="md:col-span-3 space-y-6">
              {/* Uploader Section */}
              <Card>
                <CardContent className="p-6">
                  <FileUpload
                    accept="image/*"
                    maxSize={5}
                    onFileSelected={handleFileSelected}
                  />
                  
                  <div className="flex justify-center mt-6 space-x-4">
                    <Button 
                      onClick={handleAnalyzeClick} 
                      disabled={!file || isAnalyzing || apiStatus === 'offline'}
                      className="w-full md:w-auto"
                    >
                      {isAnalyzing ? (
                        <>
                          <Loader className="mr-2 h-4 w-4 animate-spin" />
                          Analyzing...
                        </>
                      ) : "Analyze Image"}
                    </Button>
                    
                    {(file || analysisComplete) && (
                      <Button 
                        variant="outline" 
                        onClick={handleReset}
                        className="w-full md:w-auto"
                      >
                        Reset
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>
              
              {/* Image Preview */}
              {imagePreview && (
                <Card className="overflow-hidden animate-fade-in">
                  <div className="aspect-video bg-muted/50 flex items-center justify-center overflow-hidden">
                    <img 
                      src={imagePreview} 
                      alt="Preview" 
                      className="max-w-full max-h-full object-contain"
                    />
                  </div>
                </Card>
              )}
            </div>
            
            <div className="md:col-span-2">
              <DetectionResult
                loading={isAnalyzing}
                completed={analysisComplete}
                result={analysisResult}
              />
              
              {analysisComplete && analysisResult && (
                <div className="mt-6 p-4 rounded-lg bg-muted animate-fade-in">
                  <h3 className="font-medium mb-2">Detection Details:</h3>
                  <ul className="space-y-2 text-sm">
                    <li><strong>Analysis Method:</strong> Error Level Analysis (ELA)</li>
                    <li><strong>Model:</strong> Deep Neural Network</li>
                    <li><strong>Confidence Score:</strong> {Math.round(analysisResult.confidence * 100)}%</li>
                    <li><strong>Classification:</strong> {analysisResult.isAI ? 'AI-Generated' : 'Human-Created'}</li>
                  </ul>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default ImageDetection;
